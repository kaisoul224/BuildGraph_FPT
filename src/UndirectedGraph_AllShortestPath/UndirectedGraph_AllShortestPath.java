package UndirectedGraph_AllShortestPath;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Set;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author CE170483 NguyenQuocAnh
 */
public class UndirectedGraph_AllShortestPath extends javax.swing.JFrame {
    private GPaper p = null;
    JFileChooser fileChooser;
    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMdd_HHmmss");
    /**
     * Creates new form UndirectedGraph_DrawSaveOpenExport
     */
    public UndirectedGraph_AllShortestPath() {
        initComponents();
        
        //set icon jframe
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imgs/graph-icon.png")));
        
        //disalble maximize button
        this.setResizable(false);
        
        //centering the frame
        this.setLocationRelativeTo(null);
        
        p = new GPaper();
        p.setTxtGraphInfo(txtGraphInfo);
        pnlPaper.setLayout(new BorderLayout());
        pnlPaper.add(p,BorderLayout.CENTER);
        
        fileChooser = new JFileChooser();
    }
    
    public File getSaveFile(FileNameExtensionFilter filter, String filename){
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(filename));
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            if (fileChooser.getSelectedFile().exists()){
                int response = JOptionPane.showConfirmDialog(null, 
                        "Do you want to replace the existing file?", "Confirm",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response != JOptionPane.YES_OPTION){
                    return null;
                }
            }
            return fileChooser.getSelectedFile();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgGraphType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnlGraphInformation = new javax.swing.JPanel();
        rdbMatrix = new javax.swing.JRadioButton();
        rdbList = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGraphInfo = new javax.swing.JTextArea();
        lblGuideLine = new javax.swing.JLabel();
        pnlPaper = new javax.swing.JPanel();
        mnuMain = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mniSaveAs = new javax.swing.JMenu();
        mniMatrix = new javax.swing.JMenuItem();
        mniList = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mniExit = new javax.swing.JMenuItem();
        mnuGraph = new javax.swing.JMenu();
        mniClear = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        mniExportPNG = new javax.swing.JMenuItem();
        mnuAlgorithm = new javax.swing.JMenu();
        mniFindShortedPath = new javax.swing.JMenuItem();
        mniMinimumSpanningTree = new javax.swing.JMenuItem();
        mnuTraversing = new javax.swing.JMenu();
        mniBFS = new javax.swing.JMenuItem();
        mniDFS = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Undirected graph demo v1");

        pnlGraphInformation.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph's Information"));

        btgGraphType.add(rdbMatrix);
        rdbMatrix.setSelected(true);
        rdbMatrix.setText("Matrix");
        rdbMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMatrixActionPerformed(evt);
            }
        });

        btgGraphType.add(rdbList);
        rdbList.setText("List");
        rdbList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbListActionPerformed(evt);
            }
        });

        txtGraphInfo.setEditable(false);
        txtGraphInfo.setColumns(20);
        txtGraphInfo.setRows(10);
        jScrollPane1.setViewportView(txtGraphInfo);

        lblGuideLine.setText("<html>#### Draws vertices ####<br/>#1. Hold ctrl and click on space<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to add new vertex.<br/>#2. Hold shift and click on the vertex that you <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;want to remove.<br/>#3. Drag and drop a vertex to move it. <br/><br/>#### Draw edges ####<br/>#1. Select start vertex <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(click it again to unselect).<br/>#2. Select destination vertex.<br/>#3. Input edge's value.<br/>#4. Click on value of the exist edge to update.</html>");

        javax.swing.GroupLayout pnlGraphInformationLayout = new javax.swing.GroupLayout(pnlGraphInformation);
        pnlGraphInformation.setLayout(pnlGraphInformationLayout);
        pnlGraphInformationLayout.setHorizontalGroup(
            pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInformationLayout.createSequentialGroup()
                .addGroup(pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGraphInformationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(rdbMatrix)
                        .addGap(18, 18, 18)
                        .addComponent(rdbList))
                    .addComponent(jScrollPane1)
                    .addComponent(lblGuideLine, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlGraphInformationLayout.setVerticalGroup(
            pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInformationLayout.createSequentialGroup()
                .addComponent(lblGuideLine, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbMatrix)
                    .addComponent(rdbList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE))
        );

        pnlPaper.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw Graph Yourself"));

        javax.swing.GroupLayout pnlPaperLayout = new javax.swing.GroupLayout(pnlPaper);
        pnlPaper.setLayout(pnlPaperLayout);
        pnlPaperLayout.setHorizontalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 862, Short.MAX_VALUE)
        );
        pnlPaperLayout.setVerticalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mnuFile.setMnemonic('F');
        mnuFile.setText("File");

        mniOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mniOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/open.png"))); // NOI18N
        mniOpen.setText("Open");
        mniOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mniOpen);

        mniSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/save.png"))); // NOI18N
        mniSaveAs.setMnemonic('S');
        mniSaveAs.setText("Save as...");

        mniMatrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mniMatrix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/matrix.png"))); // NOI18N
        mniMatrix.setMnemonic('M');
        mniMatrix.setText("Matrix");
        mniMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMatrixActionPerformed(evt);
            }
        });
        mniSaveAs.add(mniMatrix);

        mniList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mniList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/list.png"))); // NOI18N
        mniList.setMnemonic('L');
        mniList.setText("List");
        mniList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniListActionPerformed(evt);
            }
        });
        mniSaveAs.add(mniList);

        mnuFile.add(mniSaveAs);
        mnuFile.add(jSeparator1);

        mniExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        mniExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/exit.png"))); // NOI18N
        mniExit.setMnemonic('E');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        mnuMain.add(mnuFile);

        mnuGraph.setMnemonic('G');
        mnuGraph.setText("Graph");

        mniClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.CTRL_MASK));
        mniClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/clear.png"))); // NOI18N
        mniClear.setMnemonic('C');
        mniClear.setText("Clear");
        mniClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniClearActionPerformed(evt);
            }
        });
        mnuGraph.add(mniClear);
        mnuGraph.add(jSeparator2);

        mniExportPNG.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mniExportPNG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imgs/export.png"))); // NOI18N
        mniExportPNG.setMnemonic('E');
        mniExportPNG.setText("Export PNG");
        mniExportPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExportPNGActionPerformed(evt);
            }
        });
        mnuGraph.add(mniExportPNG);

        mnuMain.add(mnuGraph);

        mnuAlgorithm.setMnemonic('A');
        mnuAlgorithm.setText("Algorithm");

        mniFindShortedPath.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mniFindShortedPath.setMnemonic('h');
        mniFindShortedPath.setText("Find shorted path");
        mniFindShortedPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFindShortedPathActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniFindShortedPath);

        mniMinimumSpanningTree.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mniMinimumSpanningTree.setMnemonic('M');
        mniMinimumSpanningTree.setText("Minimum spanning tree");
        mniMinimumSpanningTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniMinimumSpanningTreeActionPerformed(evt);
            }
        });
        mnuAlgorithm.add(mniMinimumSpanningTree);

        mnuTraversing.setMnemonic('T');
        mnuTraversing.setText("Traversing...");

        mniBFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        mniBFS.setMnemonic('B');
        mniBFS.setText("BFS");
        mniBFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniBFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniBFS);

        mniDFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        mniDFS.setMnemonic('D');
        mniDFS.setText("DFS");
        mniDFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDFSActionPerformed(evt);
            }
        });
        mnuTraversing.add(mniDFS);

        mnuAlgorithm.add(mnuTraversing);

        mnuMain.add(mnuAlgorithm);

        setJMenuBar(mnuMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlGraphInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlGraphInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        System.exit(0);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniExportPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExportPNGActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("PNG image (*.png)", "png"),
                "export_" + sdfDate.format(Calendar.getInstance().getTime()) + ".png");
        if (saveFile != null){
            BufferedImage image = new BufferedImage(p.getWidth(), p.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            p.printAll(g);
            
            g.setColor(Color.red);
            g.drawString("Nguyễn Quốc Anh # Spring 2023 # CSD201 # SE1703", 10, 20);
            
            g.dispose();
            try{
                ImageIO.write(image, "png", saveFile);
            } catch (IOException e){
                System.err.println(e);
            }
        }
    }//GEN-LAST:event_mniExportPNGActionPerformed

    private void rdbListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbListActionPerformed
        this.p.setGraphType(1);
    }//GEN-LAST:event_rdbListActionPerformed

    private void rdbMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMatrixActionPerformed
        this.p.setGraphType(0);
    }//GEN-LAST:event_rdbMatrixActionPerformed

    private void mniClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniClearActionPerformed
        this.p.clear();
    }//GEN-LAST:event_mniClearActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // TODO add your handling code here:
        fileChooser.setFileFilter(new FileNameExtensionFilter("Graph data (*.mtx, *.lst)", "mxt", "lst"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            if (!fileChooser.getSelectedFile().exists()){
                return;
            }
            File openFile = fileChooser.getSelectedFile();
            if (openFile.getName().endsWith(".mtx")){
                p.readMatrixDataFile(openFile);
            } else if (openFile.getName().endsWith(".lst")){
                p.readListDataFile(openFile);
            }
        }
        
    }//GEN-LAST:event_mniOpenActionPerformed

    private void mniMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMatrixActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.mtx)", "mtx"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".mtx");
        //1. Cần lưu số lượng đỉnh của đồ thị => NumberOfVertices
        //2. Lưu tọa độ x,y của các đỉnh
        //3. Ma trận trọng số
        
        if(saveFile != null){
            if (saveFile.getName().endsWith(".mtx")){
                ArrayList<GVertex> verties = p.getVertices();
                int [][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
           
                for(int i =0; i < verties.size(); i++){
                    strXY+= "\n" + verties.get(i).getX() + " " + verties.get(i).getY();
                }
                
                try {
                    strData += numberOfVertex;
                    strData += strXY;
                    for(int i = 0; i < numberOfVertex; i++){
                        strData += "\n" + graph[i][0];
                        for (int j = 1; j < numberOfVertex; j++){
                            strData += " " + graph[i][j];
                        }
                    }
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException ex){
                    System.err.println(ex);
                } finally {
                    try {
                        fw.close();
                    } catch (IOException ex){
                        System.err.println(ex);
                    }
                }
             }
        }
    }//GEN-LAST:event_mniMatrixActionPerformed

    private void mniListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniListActionPerformed
        // TODO add your handling code here:
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.lst)", "lst"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".lst");
        //1. Cần lưu số lượng đỉnh của đồ thị => NumberOfVertices
        //2. Lưu tọa độ x,y của các đỉnh
        //3. Ma trận trọng số
        
        if(saveFile != null){
            if (saveFile.getName().endsWith(".lst")){
                ArrayList<GVertex> verties = p.getVertices();
                int [][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
           
                for(int i =0; i < verties.size(); i++){
                    strXY+="\n" + verties.get(i).getX() + " " + verties.get(i).getY();
                }
                
                try {
                    int countEdge = 0;
                    for(int i = 0; i < numberOfVertex -2; i++){
                        for (int j = i+1 ; j < numberOfVertex; j++){
                            if (graph[i][j] > 0){
                                strData += "\n" + i + " " + j + " " + graph[i][j];
                                ++countEdge;
                            }
                        }
                    }
                    strData = numberOfVertex + " " + countEdge + strXY + strData; 
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException ex){
                    System.err.println(ex);
                } finally {
                    try {
                        fw.close();
                    } catch (IOException ex){
                        System.err.println(ex);
                    }
                }
             }
        }
    }//GEN-LAST:event_mniListActionPerformed

    private void mniBFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniBFSActionPerformed
        // TODO add your handling code here:
        this.p.BFS();
    }//GEN-LAST:event_mniBFSActionPerformed

    private void mniDFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDFSActionPerformed
        // TODO add your handling code here:
        this.p.DFS();
    }//GEN-LAST:event_mniDFSActionPerformed

    private void mniMinimumSpanningTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniMinimumSpanningTreeActionPerformed
        // TODO add your handling code here:
        this.p.Prim();
    }//GEN-LAST:event_mniMinimumSpanningTreeActionPerformed

    private void mniFindShortedPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFindShortedPathActionPerformed
        // TODO add your handling code here:
        this.p.Dijkstra();
    }//GEN-LAST:event_mniFindShortedPathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_AllShortestPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_AllShortestPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_AllShortestPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_AllShortestPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UndirectedGraph_AllShortestPath().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgGraphType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel lblGuideLine;
    private javax.swing.JMenuItem mniBFS;
    private javax.swing.JMenuItem mniClear;
    private javax.swing.JMenuItem mniDFS;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniExportPNG;
    private javax.swing.JMenuItem mniFindShortedPath;
    private javax.swing.JMenuItem mniList;
    private javax.swing.JMenuItem mniMatrix;
    private javax.swing.JMenuItem mniMinimumSpanningTree;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenu mniSaveAs;
    private javax.swing.JMenu mnuAlgorithm;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuGraph;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenu mnuTraversing;
    private javax.swing.JPanel pnlGraphInformation;
    private javax.swing.JPanel pnlPaper;
    private javax.swing.JRadioButton rdbList;
    private javax.swing.JRadioButton rdbMatrix;
    private javax.swing.JTextArea txtGraphInfo;
    // End of variables declaration//GEN-END:variables
}
